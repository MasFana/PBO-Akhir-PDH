<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        APf2j3/8H0NwCFjtA4TaAAAAAElFTkSuQmCC
</value>
  </data>
</root>